temp_table <<- func(temp_table)
maxtemp_table <<- func(maxtemp_table)
mintemp_table <<- func(mintemp_table)
return
}
update(func = rename)
update(func = rename)
precip_table <- rename(precip_table)
temp_table <- rename(temp_table)
maxtemp_table <- rename(maxtemp_table)
mintemp_table <- rename(mintemp_table)
View(precip_table)
precip_table <- sanitize(precip_table)
temp_table <- sanitize(temp_table)
maxtemp_table <- sanitize(maxtemp_table)
mintemp_table <- sanitize(mintemp_table)
View(precip_table)
sum(is.na(precip_table))
precip_table <- sqldf("select Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, from precip_table join zip_table on
precip_table.Station = zip_table.Station")
require(sqldf)
precip_table <- sqldf("select Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, from precip_table join zip_table on
precip_table.Station = zip_table.Station")
precip_table <- sqldf("select Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from precip_table join zip_table on
precip_table.Station = zip_table.Station")
precip_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from precip_table join zip_table on
precip_table.Station = zip_table.Station")
View(precip_table)
View(zip_table)
precip_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from precip_table join zip_table on
precip_table.Station = zip_table.Station")
temp_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from temp_table join zip_table on
temp_table.Station = zip_table.Station")
maxtemp_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from maxtemp_table join zip_table on
maxtemp_table.Station = zip_table.Station")
mintemp_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from mintemp_table join zip_table on
mintemp_table.Station = zip_table.Station")
temp_table <- sqldf("select temp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from temp_table join zip_table on
temp_table.Station = zip_table.Station")
maxtemp_table <- sqldf("select maxtemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from maxtemp_table join zip_table on
maxtemp_table.Station = zip_table.Station")
mintemp_table <- sqldf("select mintemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from mintemp_table join zip_table on
mintemp_table.Station = zip_table.Station")
View(precip_table)
head(zips)
unique(zips[1])
unieque(zips[2])
str(zips)
beech_bark <- read.csv("./sandy_data/same_species_estab/beech_bark_disease.csv")
beech_bark <- read.csv("./sandy_data/species_same_format/beech_bark_disease.csv")
beech_bark <- read.csv("./sandy_data/species_same_format/beech_bark_disease_estab.csv")
View(beech_bark)
precip_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from precip_table join code on
precip_table.Zip = code.zips")
View(precip_table)
rm(list = ls())
require(sqldf)
zip_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/station-inventories/zipcodes-normals-stations.txt"
temp_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/temperature/mly-tavg-normal.txt"
maxtemp_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/temperature/mly-tmax-normal.txt"
mintemp_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/temperature/mly-tmin-normal.txt"
precip_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/precipitation/mly-prcp-normal.txt"
zip_table <- read.fwf(zip_url, width = c(11, 6), header = FALSE, skip = 26,
stringsAsFactors = FALSE, sep = "", strip.white = TRUE)
temp_table <- read.table(temp_url, header = TRUE, skip = 56, stringsAsFactors = FALSE,
na.strings = c("-7777S", "-7777R", "-7777P", "-7777Q", "-7777C"))
maxtemp_table <- read.table(maxtemp_url, header = TRUE, skip = 56, stringsAsFactors = FALSE,
na.strings = c("-7777S", "-7777R", "-7777P", "-7777Q", "-7777C"))
mintemp_table <- read.table(mintemp_url, header = TRUE, skip = 56, stringsAsFactors = FALSE,
na.strings = c("-7777S", "-7777R", "-7777P", "-7777Q", "-7777C"))
precip_table <- read.table(precip_url, header = TRUE, sep = "", skip = 111,
stringsAsFactors = FALSE, na.strings = c("-7777S", "-7777R",
"-7777P", "-7777Q", "-7777C"))
rename <- function(table) {
names(table) <- c("Station", "Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
table
}
names(zip_table) <- c("Station", "Zip")
precip_table <- rename(precip_table)
temp_table <- rename(temp_table)
maxtemp_table <- rename(maxtemp_table)
mintemp_table <- rename(mintemp_table)
#Sanitize data set
sanitize <- function(table) {
table <- data.frame(Station = precip_table$Station,
as.data.frame(lapply(precip_table[,2:13], FUN = function(x) gsub("[^0-9]", "", x))))
}
precip_table <- sanitize(precip_table)
temp_table <- sanitize(temp_table)
maxtemp_table <- sanitize(maxtemp_table)
mintemp_table <- sanitize(mintemp_table)
#Group by zip codes
precip_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from precip_table join zip_table on
precip_table.Station = zip_table.Station")
temp_table <- sqldf("select temp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from temp_table join zip_table on
temp_table.Station = zip_table.Station")
maxtemp_table <- sqldf("select maxtemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from maxtemp_table join zip_table on
maxtemp_table.Station = zip_table.Station")
mintemp_table <- sqldf("select mintemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from mintemp_table join zip_table on
mintemp_table.Station = zip_table.Station")
#Add fips codes
precip_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from precip_table join code on
precip_table.Zip = code.zips")
temp_table <- sqldf("select temp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from temp_table join code on
temp_table.Zip = code.zips")
maxtemp_table <- sqldf("select maxtemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from maxtemp_table join code on
maxtemp_table.Zip = code.zips")
mintemp_table <- sqldf("select mintemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from mintemp_table join code on
mintemp_table.Zip = code.zips")
json_file <- "./zip2fips/zip2fips.json"
json_data <- fromJSON(paste(readLines(json_file), collapse = ""))
zips <- names(json_data)
fips <- as.character(json_data)
code <- data.frame(zips, fips)
require(JSON)
require(json)
require(rjson)
json_file <- "./zip2fips/zip2fips.json"
json_data <- fromJSON(paste(readLines(json_file), collapse = ""))
zips <- names(json_data)
fips <- as.character(json_data)
code <- data.frame(zips, fips)
precip_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from precip_table join code on
precip_table.Zip = code.zips")
temp_table <- sqldf("select temp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from temp_table join code on
temp_table.Zip = code.zips")
maxtemp_table <- sqldf("select maxtemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from maxtemp_table join code on
maxtemp_table.Zip = code.zips")
mintemp_table <- sqldf("select mintemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from mintemp_table join code on
mintemp_table.Zip = code.zips")
View(temp_table)
View(temp_table)
testf <- function(name) {
name <<- 3
}
testf(hello)
hello
testf <- function(name) {
eval(name) <<- 3
}
testf(hello)
name <- hello
name <- "hello"
name
eval(name)
?substitute
substitute(name)
substitute("hello")
eval(name)
testf <- function(name) {
eval(name)
}
testf(hello)
testf <- function(name) {
eval(name)
}
testf("hello")
testf <- function(name) {
assign(eval(name), 3)
}
testf("hello")
hello
testf <- function(name) {
assign(eval(name), 3)
hello
}
testf("hello")
testf <- function(name) {
assign(eval(name), 3)
hello <<- "bitch PLEASE"
}
testf("hello")
?assign
loadSpeciesData <- function(name) {
filestring <- paste("./sandy_data/species_same_format/", name, ".csv")
data <- read.csv(filestring)
assign(eval(name), data, envir = "Global.res")
}
loadSpeciesData("beech_bark_disease")
loadSpeciesData <- function(name) {
filestring <- paste("./sandy_data/species_same_format/", name, ".csv", sep = "")
data <- read.csv(filestring)
assign(eval(name), data, envir = "Global.res")
}
loadSpeciesData("beech_bark_disease")
loadSpeciesData <- function(name) {
filestring <- paste("./sandy_data/species_same_format/", name, "_estab.csv", sep = "")
data <- read.csv(filestring)
assign(eval(name), data, envir = "Global.res")
}
loadSpeciesData("beech_bark_disease")
loadSpeciesData <- function(name) {
filestring <- paste("./sandy_data/species_same_format/", name, "_estab.csv", sep = "")
data <- read.csv(filestring)
assign(eval(name), data, envir = ".GlobalEnv")
}
loadSpeciesData("beech_bark_disease")
loadSpeciesData <- function(name) {
filestring <- paste("./sandy_data/species_same_format/", name, "_estab.csv", sep = "")
data <- read.csv(filestring)
assign(eval(name), data, envir = .GlobalEnv)
}
loadSpeciesData("beech_bark_disease")
toLoad <- c("beech_bark_disease", "cereal_leaf_beetle", "emerald_ash_borer", "european_corn_borer",
"gypsy_moth", "hemlock_woolly_adelgid", "japanese_beetle", "mexican_bean")
apply(toLoad, loadSpeciesData)
lapply(toLoad, loadSpeciesData)
View(hemlock_woolly_adelgid)
View(precip_table)
View(cereal_leaf_beetle)
precip_table[precip_table$fips == beech_bark_disease$FIPS]$Presence = 1
test <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from precip_table join beech_bark_disease on
precip_table.fips = beech_bark_disease.FIPS")
test <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, precip_table.fips from precip_table join beech_bark_disease on
precip_table.fips = beech_bark_disease.FIPS")
View(test)
precip_table$Presence = 0
View(precip_table)
View(precip_table)
precip_table[precip_table$fips in beech_bark_disease$FIPS]$Presence = 1
precip_table$fips
beech_bark_disease$FIPS
View(precip_table)
test <- precip_table[1,]
class(test)
str(test)
as.numeric(test$May)
as.numeric(precip_table)
lapply(precip_table[,1:13], FUN = function(x) as.numeric(x))
View(precip_table)
str(precip_table)
dim(precip_table)[2]
toInt <- function(table) {
for(i in 2:dim(table)[2]) {
table[,i] <- as.numeric(table[,i])
}
}
toInt <- function(table) {
for(i in 2:dim(table)[2]) {
table[,i] <- as.numeric(table[,i])
}
}
precip_table <- toInt(precip_table)
temp_table <- toInt(temp_table)
maxtemp_table <-toInt(maxtemp_table)
mintemp_table <- toInt(mintemp_table)
#Logistic Regression using environmental variates to predict probability of establishment.
#Model trained on presence / absence data and environmental data. Each row of data supplies
#Presence or absence for a FIPS code and the climatic data associated with it
#
require(sqldf)
zip_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/station-inventories/zipcodes-normals-stations.txt"
temp_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/temperature/mly-tavg-normal.txt"
maxtemp_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/temperature/mly-tmax-normal.txt"
mintemp_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/temperature/mly-tmin-normal.txt"
precip_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/precipitation/mly-prcp-normal.txt"
zip_table <- read.fwf(zip_url, width = c(11, 6), header = FALSE, skip = 26,
stringsAsFactors = FALSE, sep = "", strip.white = TRUE)
temp_table <- read.table(temp_url, header = TRUE, skip = 56, stringsAsFactors = FALSE,
na.strings = c("-7777S", "-7777R", "-7777P", "-7777Q", "-7777C"))
maxtemp_table <- read.table(maxtemp_url, header = TRUE, skip = 56, stringsAsFactors = FALSE,
na.strings = c("-7777S", "-7777R", "-7777P", "-7777Q", "-7777C"))
mintemp_table <- read.table(mintemp_url, header = TRUE, skip = 56, stringsAsFactors = FALSE,
na.strings = c("-7777S", "-7777R", "-7777P", "-7777Q", "-7777C"))
precip_table <- read.table(precip_url, header = TRUE, sep = "", skip = 111,
stringsAsFactors = FALSE, na.strings = c("-7777S", "-7777R",
"-7777P", "-7777Q", "-7777C"))
rename <- function(table) {
names(table) <- c("Station", "Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
table
}
names(zip_table) <- c("Station", "Zip")
precip_table <- rename(precip_table)
temp_table <- rename(temp_table)
maxtemp_table <- rename(maxtemp_table)
mintemp_table <- rename(mintemp_table)
#Sanitize data set
sanitize <- function(table) {
table <- data.frame(Station = precip_table$Station,
as.data.frame(lapply(precip_table[,2:13], FUN = function(x) gsub("[^0-9]", "", x))))
}
precip_table <- sanitize(precip_table)
temp_table <- sanitize(temp_table)
maxtemp_table <- sanitize(maxtemp_table)
mintemp_table <- sanitize(mintemp_table)
#Group by zip codes
precip_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from precip_table join zip_table on
precip_table.Station = zip_table.Station")
temp_table <- sqldf("select temp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from temp_table join zip_table on
temp_table.Station = zip_table.Station")
maxtemp_table <- sqldf("select maxtemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from maxtemp_table join zip_table on
maxtemp_table.Station = zip_table.Station")
mintemp_table <- sqldf("select mintemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from mintemp_table join zip_table on
mintemp_table.Station = zip_table.Station")
#Add fips codes
precip_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from precip_table join code on
precip_table.Zip = code.zips")
temp_table <- sqldf("select temp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from temp_table join code on
temp_table.Zip = code.zips")
maxtemp_table <- sqldf("select maxtemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from maxtemp_table join code on
maxtemp_table.Zip = code.zips")
mintemp_table <- sqldf("select mintemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from mintemp_table join code on
mintemp_table.Zip = code.zips")
#Load species data into the global environment
loadSpeciesData <- function(name) {
filestring <- paste("./sandy_data/species_same_format/", name, "_estab.csv", sep = "")
data <- read.csv(filestring)
assign(eval(name), data, envir = .GlobalEnv)
}
toLoad <- c("beech_bark_disease", "cereal_leaf_beetle", "emerald_ash_borer", "european_corn_borer",
"gypsy_moth", "hemlock_woolly_adelgid", "japanese_beetle", "mexican_bean")
lapply(toLoad, loadSpeciesData)
toInt <- function(table) {
for(i in 2:dim(table)[2]) {
table[,i] <- as.numeric(table[,i])
}
table
}
toInt(precip_table)
toInt <- function(table) {
for(i in 2:dim(table)[2]) {
table[,i] <- as.numeric(as.character(table[,i]))
}
table
}
toInt(precip_table)
View(precip_table)
toInt <- function(table) {
for(i in 2:dim(table)[2]) {
table[,i] <- as.character(table[,i])
}
table
}
precip_table <- toInt(precip_table)
temp_table <- toInt(temp_table)
maxtemp_table <-toInt(maxtemp_table)
mintemp_table <- toInt(mintemp_table)
precip_table$fips
precip$fips in precip$FIPS
?in
precip$fips %in% precip$FIPS
View(precip_table)
precip_table[match(precip_table$fips, beech_bark_disease$FIPS)]$Presence = 1
precip_table[match(precip_table$fips, beech_bark_disease$FIPS,)]$Presence = 1
precip_table[match(precip_table$fips, beech_bark_disease$FIPS),]$Presence = 1
sanitize <- function(table) {
table <- na.omit(data.frame(Station = precip_table$Station,
as.data.frame(lapply(precip_table[,2:13], FUN = function(x) gsub("[^0-9]", "", x)))))
}
precip_table <- sanitize(precip_table)
temp_table <- sanitize(temp_table)
maxtemp_table <- sanitize(maxtemp_table)
mintemp_table <- sanitize(mintemp_table)
precip_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from precip_table join zip_table on
precip_table.Station = zip_table.Station")
temp_table <- sqldf("select temp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from temp_table join zip_table on
temp_table.Station = zip_table.Station")
maxtemp_table <- sqldf("select maxtemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from maxtemp_table join zip_table on
maxtemp_table.Station = zip_table.Station")
mintemp_table <- sqldf("select mintemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip from mintemp_table join zip_table on
mintemp_table.Station = zip_table.Station")
#Add fips codes
precip_table <- sqldf("select precip_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from precip_table join code on
precip_table.Zip = code.zips")
temp_table <- sqldf("select temp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from temp_table join code on
temp_table.Zip = code.zips")
maxtemp_table <- sqldf("select maxtemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from maxtemp_table join code on
maxtemp_table.Zip = code.zips")
mintemp_table <- sqldf("select mintemp_table.Station, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec, Zip, fips from mintemp_table join code on
mintemp_table.Zip = code.zips")
toInt <- function(table) {
for(i in 2:dim(table)[2]) {
table[,i] <- as.character(table[,i])
}
table
}
precip_table <- toInt(precip_table)
temp_table <- toInt(temp_table)
maxtemp_table <-toInt(maxtemp_table)
mintemp_table <- toInt(mintemp_table)
precip_table$Presence = 0
precip_table[match(precip_table$fips, beech_bark_disease$FIPS),]$Presence = 1
sum(is.na(precip_table))
match(precip_table$fips, beech_bark_disease$FIPS)
na.omit(match(precip_table$fips, beech_bark_disease$FIPS))
?match
precip_table$fips %in% beech_bark_disease$FIPS
precip_table[precip_table$fips %in% beech_bark_disease$FIPS,]$Presence = 1
View(precip_table)
sum(precip_table$Presence)
addPresence(table, species) {
table$Presence = 0
table[table$fips %in% species$FIPS,]$Presence = 1
table
}
addPresence <- function(table, species) {
table$Presence = 0
table[table$fips %in% species$FIPS,]$Presence = 1
table
}
createRegModel <- function(species) {
temp_table <<- addPresence(temp_table, species)
}
createRegModel(beech_bark_disease)
View(temp_table)
View(precip_table)
createRegModel <- function(species) {
precip_table <<- addPresence(precip_table, species)
temp_table <<- addPresence(temp_table, species)
maxtemp_table <<- addPresence(maxtemp_table, species)
mintemp_table <<- addPresence(mintemp_table, species)
}
rm(list = ls)
rm(list = ls())
# Import Zip to FIPS code decoder
require(rjson)
json_file <- "./zip2fips/zip2fips.json"
json_data <- fromJSON(paste(readLines(json_file), collapse = ""))
zips <- names(json_data)
fips <- as.character(json_data)
code <- data.frame(zips, fips)
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/logistic_regression.R', echo=TRUE)
View(precip_table)
createRegModel("beech_bark_disease")
addPresence(precip_table, "beech_bark_disease")
addPresence(precip_table, "beech_bark_disease")
addPresence(precip_table, "beech_bark_disease")
precip_table[precip_table$fips %in% beech_bark_disease$FIPS,]
addPresence <- function(table, species) {
table$Presence = 0
table[table$fips %in% eval(species)$FIPS,]$Presence = 1
table
}
addPresence(precip_table, "beech_bark_disease")
test <- function(species) {
eval(species)
}
test("beech_bark_disease")
test <- function(species) {
get(species)
}
test("beech_bark_disease")
addPresence <- function(table, species) {
table$Presence = 0
table[table$fips %in% get(species)$FIPS,]$Presence = 1
table
}
createRegModel <- function(species) {
precip_table <<- addPresence(precip_table, species)
temp_table <<- addPresence(temp_table, species)
maxtemp_table <<- addPresence(maxtemp_table, species)
mintemp_table <<- addPresence(mintemp_table, species)
}
createRegModel("beech_bark_disease")
View(precip_table)
View(precip_table)
save <- precip_table
createRegModel("emerald_ash_borer")
View(precip_table)
View(save)
rm(list = ls())
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/zips2fips.R', echo=TRUE)
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/logistic_regression.R', echo=TRUE)
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/logistic_regression.R', echo=TRUE)
View(precip_table)
View(zip_table)
zip_table[zip_table$Station == "USC00274480"]
zip_table[zip_table$Station == "USC00274480",]
