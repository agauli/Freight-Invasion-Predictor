y1 <- test1log(0.01, 0.02)
y1
plot(x,y1)
plot(x,y1)
y1 <- test1log(0.01, 0.03)
plot(x,y1)
y1
y1 <- test1log(0.01, 0.05)
plot(x,y1)
y1 <- test1log(0.01, 0.05)
y1
test1log <- function(S_n, r_0) {
y <- rep(NA, 100)
y[1] <- S_n
for(i in 1:99) {
y[i+1] <- (exp(r_0)*y[i]) / (1 + y[i]*(exp(r_0) - 1))
}
y
}
source('C:/Users/Ryan/Desktop/Thesis/testlogs.R', echo=TRUE)
y1 <- test1log(0.01, 0.01)
y1
y1 <- test1log(0.01, 0.05)
y1
y1 <- test1log(0.02, 0.05)
y1 <- test1log(0.02, 0.05)
y1
y1 <- test1log(0.05, 0.05)
y1
plot(x,y1)
y2 <- test2log(0.05,0.05)
y3<- test3log(0.05,0.05)
plot(x,y2)
y2
y3<- test3log(0.05,0.05)
y3
y3<- test3log(0.05,1)
y3
y2
exp(-.05)
exp(-2)
refresh <- function(S_n, r_0) {
y1 <<- test1log(S_n, r_0)
y2 <<- test2log(S_n, r_0)
y3 <<- test3log(S_n, r_0)
y4 <<- test4log(S_n, r_0)
}
y1
y2
refresh(0.05, 1)
y1
y2
y3
y4
refresh(0.05, 1.5)
y2
y3
y1
plot(x,y2)
plot(x, y1)
plot(x, y2)
plot(x, y3)
plot(x, y1)
refresh(0.05, 2.5)
y2
y3
y1
y1 <- test1log(0.05, -0.01)
plot(x, y1)
y1 <- test1log(0.05, -0.05)
plot(x, y1)
y1 <- test1log(0.05, -1)
plot(x, y1)
y1 <- test1log(0.05, -0.001)
plot(x, y1)
test1log <- function(S_n, r_0) {
y <- rep(NA, 200)
fd <- rep(NA, 200)
y[1] <- S_n
fd[1] <- 0
for(i in 1:199) {
y[i+1] <- (exp(r_0)*y[i]) / (1 + y[i]*(exp(r_0) - 1))
fd[i+1] <- y[i+1] - y[i]
}
y
}
fd1 <- test1log(0.05, 0.05)
y1 <- test1log(0.05,0.05)
test1log <- function(S_n, r_0) {
y <- rep(NA, 200)
fd <- rep(NA, 200)
y[1] <- S_n
fd[1] <- 0
for(i in 1:199) {
y[i+1] <- (exp(r_0)*y[i]) / (1 + y[i]*(exp(r_0) - 1))
fd[i+1] <- y[i+1] - y[i]
}
fd1 <<- fd
y
}
y1 <- test1log(0.05,0.05)
plot(x, y1)
x <- 1:200
plot(x, y1)
plot(x, fd1)
source('C:/Users/Ryan/Desktop/Thesis/testlogs.R', echo=TRUE)
refresh <- function(S_n, r_0) {
#y1 <<- test1log(S_n, r_0)
y2 <<- test2log(S_n, r_0)
y3 <<- test3log(S_n, r_0)
y4 <<- test4log(S_n, r_0)
}
refresh(0.05, 2)
plot(x, y2)
plot(x, y3)
plot(x, 1)
plot(x, fd1)
plot(x, fd2)
plot(x, fd3)
plot(x,y1)
plot(x,fd1)
plot(x,y2)
info
test
test1log <- function(S_n, r_0) {
y <- rep(NA, 200)
fd <- rep(NA, 200)
y[1] <- S_n
fd[1] <- 0
for(i in 1:199) {
y[i+1] <- (exp(r_0)*y[i]) / (2 + y[i]*(exp(r_0) - 1))
fd[i+1] <- y[i+1] - y[i]
}
fd1 <<- fd
y
}
y1 <- test1log(0.05, 0.05)
plot(x, y1)
y1
test1log <- function(S_n, r_0) {
y <- rep(NA, 200)
fd <- rep(NA, 200)
y[1] <- S_n
fd[1] <- 0
for(i in 1:199) {
y[i+1] <- (exp(r_0)*y[i]) / (1 + y[i]*((exp(r_0) - 1)/2)
fd[i+1] <- y[i+1] - y[i]
}
fd1 <<- fd
y
}
#1) Our Formulation
test1log <- function(S_n, r_0) {
y <- rep(NA, 200)
fd <- rep(NA, 200)
y[1] <- S_n
fd[1] <- 0
for(i in 1:199) {
y[i+1] <- (exp(r_0)*y[i]) / (1 + y[i]*((exp(r_0) - 1)/2))
fd[i+1] <- y[i+1] - y[i]
}
fd1 <<- fd
y
}
y1 <- test1log(0.05, 0.05)
plot(x, y1)
test4log <- function(S_n, r_0) {
y <- rep(NA, 100)
for(i in 1:100) {
y[i] <- (2*S_n) / (S_n + (2 - S_n)*exp(-r_0*i))
}
y
}
y4 <- test4log(0.05,0.05)
plot(x,y4)
plot(1:100,y4)
test4log <- function(S_n, r_0) {
y <- rep(NA, 200)
for(i in 1:200) {
y[i] <- (2*S_n) / (S_n + (2 - S_n)*exp(-r_0*i))
}
y
}
y4 <- test4log(0.05,0.05)
plot(x,y4)
source('C:/Users/Ryan/Desktop/Thesis/testlogs.R', echo=TRUE)
a
x
X
s_1
?matrix
A <- matrix(c(0.95, 0.05, 0.0), 2, 2)
s = matrix(c(0,0.05), nrow = 2, ncol = 1)
simulate <- function(s1_0, s2_0, r_0) {
for i in 1:199 {
s <- (exp(r_0)*s) / (1 + s*((exp(r_0) - 1)/1))
s <- A %*% s
}
}
A <- matrix(c(0.95, 0.05, 0.0), 2, 2)
s = matrix(c(0,0.05), nrow = 2, ncol = 1)
simulate <- function(s1_0, s2_0, r_0) {
for(i in 1:199) {
s <- (exp(r_0)*s) / (1 + s*((exp(r_0) - 1)/1))
s <- A %*% s
}
}
simulate <- function(s1_0, s2_0, r_0) {
for(i in 1:199) {
s <- (exp(r_0)*s) / (1 + s*((exp(r_0) - 1)/1))
s <- A %*% s
}
s
}
simulate(r_0 = 0.05)
simulate(r_0 = 0.1)
A
A <- matrix(c(0.95, 0.05, 0.05), 2, 2)
A <- matrix(c(0.95, 0.05, 0.05, 0.95), 2, 2)
s = matrix(c(0,0.05), nrow = 2, ncol = 1)
simulate <- function(s1_0, s2_0, r_0) {
for(i in 1:199) {
s <- (exp(r_0)*s) / (1 + s*((exp(r_0) - 1)/1))
s <- A %*% s
}
s
}
A
simulate(r_0 = 0.1)
?list
test <- list()
test[1]
simulate <- function(s1_0, s2_0, r_0) {
results <- list()
for(i in 1:200) {
s <- (exp(r_0)*s) / (1 + s*((exp(r_0) - 1)/1))
s <- A %*% s
results[[i]] <- s
}
results
}
head(results)
results
s <- simulation(r_0 = 0.05)
s <- simulate(r_0 = 0.05)
s
A <- matrix(c(0.95, 0.05, 0.05, 0.95), 2, 2)
s_0 = matrix(c(0,0.05), nrow = 2, ncol = 1)
simulate <- function(s, r_0) {
results <- list()
for(i in 1:200) {
s <- (exp(r_0)*s) / (1 + s*((exp(r_0) - 1)/1))
s <- A %*% s
results[[i]] <- s
}
results
}
s <- simulate(s = s_0, r_0 = 0.05)
s
plot(x, y1)
refresh(0.05, 3.7)
plot(x, y2)
plot(x, y3)
test1log <- function(S_n, r_0) {
y <- rep(NA, 200)
fd <- rep(NA, 200)
y[1] <- S_n
fd[1] <- 0
for(i in 1:199) {
y[i+1] <- (exp(r_0)*y[i]) / (1 + y[i]*((exp(r_0) - 1)/1))
fd[i+1] <- y[i+1] - y[i]
}
fd1 <<- fd
y
}
refresh(0.05,0.05)
y1
cbind(y1,y4)
loadData("truckslogs")
loadData("trucks_logs")
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/environ_similarity.R', echo=TRUE)
sim
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/environ_similarity.R', echo=TRUE)
createMaps("Michigan", 30, 20, environ = TRUE, growth = TRUE, r_0 = 0.01)
sim
temp_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/temperature/mly-tavg-normal.txt"
precip_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/precipitation/mly-prcp-normal.txt"
stations_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/station-inventories/prcp-inventory.txt"
temp_stations_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/station-inventories/temp-inventory.txt"
temp_table <- read.table(temp_url, header = TRUE, skip = 56, stringsAsFactors = FALSE,
na.strings = c("-7777S", "-7777R", "-7777P", "-7777Q", "-7777C"))
?read.table
test_file = "http://textfiles.com/100/914bbs.txt"
test_table <- read.table(test_file)
?write.csv
write.csv(sim, "environ_sim.csv")
info
test_table <- ("http://textfiles.com/100/914bbs.txt", skip = 10)
test_table <- read.table("http://textfiles.com/100/914bbs.txt", skip = 10)
test_table <- read.table("http://textfiles.com/100/914bbs.txt", skip = 20)
test_table <- read.table("ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/precipitation/mly-prcp-normal.txt", skip = 20)
temp_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/temperature/mly-tavg-normal.txt"
precip_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/products/precipitation/mly-prcp-normal.txt"
stations_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/station-inventories/prcp-inventory.txt"
temp_stations_url <- "ftp://ftp.ncdc.noaa.gov/pub/data/normals/1981-2010/station-inventories/temp-inventory.txt"
temp_table <- read.table(temp_url, header = TRUE, skip = 56, stringsAsFactors = FALSE,
na.strings = c("-7777S", "-7777R", "-7777P", "-7777Q", "-7777C"))
createMaps("Michigan", 30, 20, environ = TRUE, growth = TRUE, r_0 = 0.01)
rm(list = ls())
info = 2
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/environ_similarity.R', echo=TRUE)
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/environ_similarity.R', echo=TRUE)
precip_table
precip_table <- sqldf("select V5, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec from precip_table join state_table on
state_table.Abbreviation = precip_table.V5")
temp_table <- sqldf("select V5, Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep,
Oct, Nov, Dec from temp_table join state_table on
state_table.Abbreviation = temp_table.V5")
# choro_map.R
# created by: Nathan Wikle, 10 July 2015
# A function to plot a choropleth map, given an input state vector.
# Note that this function is for states only. If higher geographic
# resolution is needed, a different function must be used.
# Input: sv: a vectors of states, with invasion percentage values.
#        t: a string, used to make the title of the plot.
# Output: a choropleth map, created using ggplot2
choro_map <- function(sv, t) {
require(ggplot2)
require(maps)
# a list of states, all lower case
state<-c("alabama","alaska","arizona","arkansas","california",
"colorado","connecticut","delaware","florida","georgia", "hawaii", "idaho",
"illinois","indiana","iowa","kansas","kentucky","louisiana","maine","maryland",
"massachusetts","michigan","minnesota","mississippi","missouri","montana",
"nebraska","nevada","new hampshire","new jersey","new mexico","new york",
"north carolina","north dakota","ohio","oklahoma","oregon","pennsylvania",
"rhode island","south carolina","south dakota","tennessee","texas","utah",
"vermont","virginia","washington","district of columbia","west virginia", "wisconsin",
"wyoming")
d <- data.frame(state,as.vector(sv)) # create a df of states and their respective values
names(d) <- c("state","value")
d$region <- d$state  # need to merge the df with the map coordinates
all_states <- map_data("state") # obtain map coordinates for each state
newD <- merge(all_states,d,by="region")  # merge the values and the coordinates
newD <- newD[newD$region!="district of columbia",]
p <- ggplot() # create a ggplot
# populate the states, colors are variations on red
p <- p + geom_polygon(data=newD,aes(x=long,y=lat,group=group,
fill=value),color="white") +
scale_fill_continuous(low="thistle2",high="darkred",guide="colorbar")
# add titles to the graph and the legend
p <- p + theme_bw() + labs(fill="Intensity of Invasion",title=t,x="",y="")
# replace background
p <- p + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border = element_blank())
# return ggplot object
p
}
sim <- read.csv("environ_similarity.csv")
sim <- read.csv("environ_sim.csv")
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/choro_map.R', echo=TRUE)
loadData <- function(filename, com = TRUE, mode = TRUE, run_anyway = FALSE) {
if(info == filename & run_anyway != TRUE) {
return("That dataset is already loaded.");
}
else {
one <- paste("./data/1997FAF_", filename, ".csv", sep = "")
two <- paste("./data/2002FAF_", filename, ".csv", sep = "")
three <- paste("./data/2007FAF_", filename, ".csv", sep = "")
four <- paste("./data/2012FAF_", filename, ".csv", sep = "")
d1 <- read.csv(one, header = TRUE)
d2 <- read.csv(two, header = TRUE)
d3 <- read.csv(three, header = TRUE)
d4 <- read.csv(four, header = TRUE)
names(d1)<-c("origin","destination","commodity", "mode","weight","ton-mile","value1")
names(d2)<-c("origin","destination","commodity", "mode","weight","ton-mile","value1")
names(d3)<-c("origin","destination","commodity", "mode","weight","ton-mile","value1")
names(d4)<-c("origin","destination","commodity", "mode","weight","ton-mile","value1")
w1 <<- weight(d1, com = com, mode = mode)
w2 <<- weight(d2, com = com, mode = mode)
w3 <<- weight(d3, com = com, mode = mode)
w4 <<- weight(d4, com = com, mode = mode)
info <<- filename
}
}
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/markov_model.R', echo=TRUE)
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/many_maps.R', echo=TRUE)
p
w1
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/weight_matrix.R', echo=TRUE)
w1
loadData("trucks_logs")
info
p
w1
generateP
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/matrix_sampling.R', echo=TRUE)
createMaps("Michigan", 20, 30, environ = TRUE, growth = TRUE, r_0 = 0.01)
sim
sim <- as.matrix(sim)
sim
sim <- read.csv("environ_sim")
sim <- read.csv("environ_sim.csv")
sim <- matrix(sim, 51, 51)
sim <- read.csv("environ_sim.csv", header = FALSE)
sim
dim(sim)
matrix(sim, 51,51)
as.numeric(sim)
class(sim)
matrix(sim, 52, 52)
as.matrix(sim, 52, 52)
?write.csv
sim <- read.csv("environ_sim.csv", header = FALSE)
sim
sim <- as.matrix(sim, 51,51)
sim
createMaps("Michigan", 20, 30, environ = TRUE, growth = TRUE, r_0 = 0.01)
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/average_states.R', echo=TRUE)
createMaps("Michigan", 20, 30, environ = TRUE, growth = TRUE, r_0 = 0.01)
runMany
createMaps("Michigan", 30, 30, environ = TRUE, growth = TRUE, r_0 = 0.01)
makemaps()
makemaps
debug(createMaps())
createMaps("Michigan", 30, 30, environ = TRUE, growth = TRUE, r_0 = 0.01)
createMaps("Michigan", 30, 30, environ = TRUE, growth = TRUE, r_0 = 0.01)
createMaps("Michigan", 30, 30, environ = TRUE, growth = TRUE, r_0 = 0.01)
createMaps <- function(init_state, years, simulations, environ = FALSE, growth = FALSE, r_0) {
initial <- rep(0, 51)
index <- which(states == init_state)
initial[index] <- 1
if(growth == TRUE) {
state_data <- runMany(initial, simulations, years, w1, w2, w3, w4,
growth = TRUE, r_0 = r_0)
label = "growth"
}
else {
state_data <- runMany(initial, simulations, years, w1, w2, w3, w4)
label = ""
}
average_data <- average_states(state_data)
filename <- paste(init_state, info, label, "maps.pdf", sep = "_")
many_maps(average_data[[1]], filename, initial = FALSE)
}
debugSource('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/markov_model.R', echo=TRUE)
undebug(createMaps())
undebug(createMaps())
createMaps("Michigan", 30, 30, environ = TRUE, growth = TRUE, r_0 = 0.01)
createMaps <- function(init_state, years, simulations, environ = FALSE, growth = FALSE, r_0) {
initial <- rep(0, 51)
index <- which(states == init_state)
initial[index] <- 1
if(growth == TRUE) {
state_data <- runMany(initial, simulations, years, w1, w2, w3, w4,
growth = TRUE, r_0 = r_0)
label = "growth"
}
else {
state_data <- runMany(initial, simulations, years, w1, w2, w3, w4)
label = ""
}
average_data <- average_states(state_data)
filename <- paste(init_state, info, label, "maps.pdf", sep = "_")
many_maps(average_data[[2]], filename, initial = FALSE)
}
createMaps("Michigan", 30, 30, environ = TRUE, growth = TRUE, r_0 = 0.01)
info
createMaps <- function(init_state, years, simulations, environ = FALSE, growth = FALSE, r_0) {
initial <- rep(0, 51)
index <- which(states == init_state)
initial[index] <- 1
if(growth == TRUE) {
state_data <- runMany(initial, simulations, years, w1, w2, w3, w4,
growth = TRUE, r_0 = r_0)
label = "growth"
}
else {
state_data <- runMany(initial, simulations, years, w1, w2, w3, w4)
label = ""
}
average_data <- average_states(state_data)
filename <- paste(init_state, info, label, "maps.pdf", sep = "_")
many_maps(average_data[[1]], filename, initial = FALSE)
}
createMaps("Michigan", 30, 30, environ = TRUE, growth = TRUE, r_0 = 0.01)p
p
w1
w2
w3
w4
w5
p <- generateP(w1,w2,w3,w4)
p
class(p)
p$P
rowsums(p)
rowSums(p)
p
class(p)
rowSums(p$P)
colSums(p$P)
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/markov_model.R', echo=TRUE)
createMaps("Michigan", 20, 30, environ = TRUE, growth = TRUE, r_0 = 0.04)
loadData("trucks_agriprod")
info
createMaps("California", 20, 30, environ = TRUE, growth = TRUE, r_0 = 0.04)
createMaps("California", 40, 30, environ = TRUE, growth = TRUE, r_0 = 0.04)
source('C:/Users/Ryan/Desktop/Nimbios/Marine_Invasives/ModelingFitting/SRE_simulation/r_code/simulation/markov_model.R', echo=TRUE)
createMaps("California", 20, 30, environ = TRUE, growth = TRUE, r_0 = 0.04)
createMaps("California", 20, 30, environ = TRUE, growth = TRUE, r_0 = 0.01)
source("weight_matrix.R")
